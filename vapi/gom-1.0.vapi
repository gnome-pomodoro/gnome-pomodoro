/* gom-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gom", gir_namespace = "Gom", gir_version = "1.0", lower_case_cprefix = "gom_")]
namespace Gom {
	[CCode (cheader_filename = "gom/gom.h", type_id = "gom_adapter_get_type ()")]
	public class Adapter : GLib.Object {
		[CCode (has_construct_function = false)]
		public Adapter ();
		public async bool close_async () throws GLib.Error;
		public bool close_sync () throws GLib.Error;
		public bool execute_sql (string sql) throws GLib.Error;
		public unowned Sqlite.Database get_handle ();
		public async bool open_async (string uri) throws GLib.Error;
		public bool open_sync (string uri) throws GLib.Error;
		public void queue_read ([CCode (scope = "async")] Gom.AdapterCallback callback);
		public void queue_write ([CCode (scope = "async")] Gom.AdapterCallback callback);
	}
	[CCode (cheader_filename = "gom/gom.h", type_id = "gom_command_get_type ()")]
	public class Command : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Command ();
		public bool execute (out unowned Gom.Cursor cursor) throws GLib.Error;
		public int get_param_index (string param_name);
		public void reset ();
		public void set_param (uint param, GLib.Value value);
		public void set_param_bytes (uint param, GLib.Bytes bytes);
		public void set_param_double (uint param, double value);
		public void set_param_float (uint param, float value);
		public void set_param_int (uint param, int value);
		public void set_param_int64 (uint param, int64 value);
		public void set_param_string (uint param, string value);
		public void set_param_uint (uint param, uint value);
		public void set_param_uint64 (uint param, uint64 value);
		public void set_sql (string sql);
		[NoAccessorMethod]
		public Gom.Adapter adapter { owned get; construct; }
		public string sql { set; }
	}
	[CCode (cheader_filename = "gom/gom.h", type_id = "gom_command_builder_get_type ()")]
	public class CommandBuilder : GLib.Object {
		[CCode (has_construct_function = false)]
		protected CommandBuilder ();
		public Gom.Command build_count ();
		public GLib.List<Gom.Command> build_create (uint version);
		public Gom.Command build_delete ();
		public Gom.Command build_insert (Gom.Resource resource);
		public Gom.Command build_select ();
		public Gom.Command build_update (Gom.Resource resource);
		[NoAccessorMethod]
		public Gom.Adapter adapter { owned get; construct; }
		[NoAccessorMethod]
		public Gom.Filter filter { owned get; set; }
		[NoAccessorMethod]
		public uint limit { get; set; }
		[NoAccessorMethod]
		public string m2m_table { owned get; construct; }
		[NoAccessorMethod]
		public GLib.Type m2m_type { get; construct; }
		[NoAccessorMethod]
		public uint offset { get; set; }
		[NoAccessorMethod]
		public GLib.Type resource_type { get; set; }
		[NoAccessorMethod]
		public Gom.Sorting sorting { owned get; set; }
	}
	[CCode (cheader_filename = "gom/gom.h", type_id = "gom_cursor_get_type ()")]
	public class Cursor : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Cursor ();
		public void get_column (uint column, GLib.Value value);
		public bool get_column_boolean (uint column);
		public double get_column_double (uint column);
		public float get_column_float (uint column);
		public int get_column_int (uint column);
		public int64 get_column_int64 (uint column);
		public unowned string get_column_name (uint column);
		public unowned string get_column_string (uint column);
		public uint get_column_uint (uint column);
		public uint64 get_column_uint64 (uint column);
		public uint get_n_columns ();
		public bool next ();
		[NoAccessorMethod]
		public Sqlite.Statement statement { owned get; construct; }
	}
	[CCode (cheader_filename = "gom/gom.h", type_id = "gom_filter_get_type ()")]
	public class Filter : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected Filter ();
		[CCode (has_construct_function = false)]
		public Filter.and (Gom.Filter left, Gom.Filter right);
		[CCode (cname = "gom_filter_new_and_fullv", has_construct_function = false)]
		public Filter.and_full ([CCode (array_length = false, type = "GomFilter**")] Gom.Filter[] filter_array);
		[CCode (has_construct_function = false)]
		public Filter.eq (GLib.Type resource_type, string property_name, GLib.Value value);
		public string get_sql (GLib.HashTable<void*,void*> table_map);
		public GLib.Array<GLib.Value?> get_values ();
		[CCode (has_construct_function = false)]
		public Filter.glob (GLib.Type resource_type, string property_name, GLib.Value value);
		[CCode (has_construct_function = false)]
		public Filter.gt (GLib.Type resource_type, string property_name, GLib.Value value);
		[CCode (has_construct_function = false)]
		public Filter.gte (GLib.Type resource_type, string property_name, GLib.Value value);
		[CCode (has_construct_function = false)]
		public Filter.is_not_null (GLib.Type resource_type, string property_name);
		[CCode (has_construct_function = false)]
		public Filter.is_null (GLib.Type resource_type, string property_name);
		[CCode (has_construct_function = false)]
		public Filter.like (GLib.Type resource_type, string property_name, GLib.Value value);
		[CCode (has_construct_function = false)]
		public Filter.lt (GLib.Type resource_type, string property_name, GLib.Value value);
		[CCode (has_construct_function = false)]
		public Filter.lte (GLib.Type resource_type, string property_name, GLib.Value value);
		[CCode (has_construct_function = false)]
		public Filter.neq (GLib.Type resource_type, string property_name, GLib.Value value);
		[CCode (has_construct_function = false)]
		public Filter.or (Gom.Filter left, Gom.Filter right);
		[CCode (cname = "gom_filter_new_or_fullv", has_construct_function = false)]
		public Filter.or_full ([CCode (array_length = false, type = "GomFilter**")] Gom.Filter[] filter_array);
		[CCode (has_construct_function = false)]
		public Filter.sql (string sql, GLib.Array<GLib.Value?> values);
		[NoAccessorMethod]
		public Gom.FilterMode mode { get; construct; }
	}
	[CCode (cheader_filename = "gom/gom.h", type_id = "gom_repository_get_type ()")]
	public class Repository : GLib.Object {
		[CCode (has_construct_function = false)]
		public Repository (Gom.Adapter adapter);
		public async bool automatic_migrate_async (uint version, owned GLib.List<weak GLib.Type?> object_types) throws GLib.Error;
		public bool automatic_migrate_sync (uint version, owned GLib.List<weak GLib.Type?> object_types) throws GLib.Error;
		public async Gom.ResourceGroup find_async (GLib.Type resource_type, Gom.Filter? filter) throws GLib.Error;
		public async Gom.Resource find_one_async (GLib.Type resource_type, Gom.Filter? filter) throws GLib.Error;
		public Gom.Resource find_one_sync (GLib.Type resource_type, Gom.Filter? filter) throws GLib.Error;
		[CCode (finish_name = "gom_repository_find_finish")]
		public async Gom.ResourceGroup find_sorted_async (GLib.Type resource_type, Gom.Filter? filter, Gom.Sorting? sorting) throws GLib.Error;
		public Gom.ResourceGroup find_sorted_sync (GLib.Type resource_type, Gom.Filter? filter, Gom.Sorting? sorting) throws GLib.Error;
		public Gom.ResourceGroup find_sync (GLib.Type resource_type, Gom.Filter? filter) throws GLib.Error;
		public unowned Gom.Adapter get_adapter ();
		public async bool migrate_async (uint version, [CCode (scope = "async")] Gom.RepositoryMigrator migrator) throws GLib.Error;
		public bool migrate_sync (uint version, Gom.RepositoryMigrator migrator) throws GLib.Error;
		public Gom.Adapter adapter { get; construct; }
	}
	[CCode (cheader_filename = "gom/gom.h", type_id = "gom_resource_get_type ()")]
	public abstract class Resource : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Resource ();
		public async bool delete_async () throws GLib.Error;
		public bool delete_sync () throws GLib.Error;
		public async Gom.ResourceGroup fetch_m2m_async (GLib.Type resource_type, string m2m_table, Gom.Filter filter) throws GLib.Error;
		public static GLib.Quark from_bytes_func_quark ();
		public static bool has_dynamic_pkey (GLib.Type type);
		public static GLib.Quark new_in_version_quark ();
		public static GLib.Quark not_mapped_quark ();
		public static GLib.Quark notnull ();
		public static GLib.Quark ref_property_name ();
		public static GLib.Quark ref_table_class ();
		public async bool save_async () throws GLib.Error;
		public bool save_sync () throws GLib.Error;
		[CCode (cname = "gom_resource_class_set_notnull")]
		public class void set_notnull (string property_name);
		[CCode (cname = "gom_resource_class_set_primary_key")]
		public class void set_primary_key (string primary_key);
		[CCode (cname = "gom_resource_class_set_property_from_bytes")]
		public class void set_property_from_bytes (string property_name, [CCode (destroy_notify_pos = 2.1)] owned Gom.ResourceFromBytesFunc from_bytes_func);
		[CCode (cname = "gom_resource_class_set_property_new_in_version")]
		public class void set_property_new_in_version (string property_name, uint version);
		[CCode (cname = "gom_resource_class_set_property_set_mapped")]
		public class void set_property_set_mapped (string property_name, bool is_mapped);
		[CCode (cname = "gom_resource_class_set_property_to_bytes")]
		public class void set_property_to_bytes (string property_name, [CCode (destroy_notify_pos = 2.1)] owned Gom.ResourceToBytesFunc to_bytes_func);
		[CCode (cname = "gom_resource_class_set_property_transform")]
		public class void set_property_transform (string property_name, [CCode (destroy_notify_pos = 2.1)] owned Gom.ResourceToBytesFunc to_bytes_func, [CCode (destroy_notify_pos = 2.1)] owned Gom.ResourceFromBytesFunc from_bytes_func);
		[CCode (cname = "gom_resource_class_set_reference")]
		public class void set_reference (string property_name, string ref_table_name, string ref_property_name);
		[CCode (cname = "gom_resource_class_set_table")]
		public class void set_table (string table);
		[CCode (cname = "gom_resource_class_set_unique")]
		public class void set_unique (string property_name);
		public static GLib.Quark to_bytes_func_quark ();
		public static GLib.Quark unique ();
		[NoAccessorMethod]
		public Gom.Repository repository { owned get; set; }
	}
	[CCode (cheader_filename = "gom/gom.h", type_id = "gom_resource_group_get_type ()")]
	public class ResourceGroup : GLib.Object {
		[CCode (has_construct_function = false)]
		public ResourceGroup (Gom.Repository repository);
		public bool append (Gom.Resource resource);
		public async bool delete_async () throws GLib.Error;
		public bool delete_sync () throws GLib.Error;
		public async bool fetch_async (uint index_, uint count) throws GLib.Error;
		public bool fetch_sync (uint index_, uint count) throws GLib.Error;
		public uint get_count ();
		public unowned Gom.Resource get_index (uint index_);
		public unowned string get_m2m_table ();
		public async bool write_async () throws GLib.Error;
		public bool write_sync () throws GLib.Error;
		public uint count { get; construct; }
		[NoAccessorMethod]
		public Gom.Filter filter { owned get; construct; }
		[NoAccessorMethod]
		public bool is_writable { get; construct; }
		public string m2m_table { get; construct; }
		[NoAccessorMethod]
		public GLib.Type m2m_type { get; construct; }
		[NoAccessorMethod]
		public Gom.Repository repository { owned get; construct; }
		[NoAccessorMethod]
		public GLib.Type resource_type { get; construct; }
		[NoAccessorMethod]
		public Gom.Sorting sorting { owned get; construct; }
	}
	[CCode (cheader_filename = "gom/gom.h", type_id = "gom_sorting_get_type ()")]
	public class Sorting : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected Sorting ();
		public void add (GLib.Type resource_type, string property_name, Gom.SortingMode sorting_mode);
		public string get_sql (GLib.HashTable<void*,void*> table_map);
	}
	[CCode (cheader_filename = "gom/gom.h", cprefix = "GOM_FILTER_", type_id = "gom_filter_mode_get_type ()")]
	public enum FilterMode {
		SQL,
		OR,
		AND,
		EQ,
		NEQ,
		GT,
		GTE,
		LT,
		LTE,
		LIKE,
		GLOB,
		IS_NULL,
		IS_NOT_NULL
	}
	[CCode (cheader_filename = "gom/gom.h", cprefix = "GOM_SORTING_", type_id = "gom_sorting_mode_get_type ()")]
	public enum SortingMode {
		ASCENDING,
		DESCENDING
	}
	[CCode (cheader_filename = "gom/gom.h", cprefix = "GOM_ERROR_")]
	public errordomain Error {
		ADAPTER_OPEN,
		COMMAND_NO_SQL,
		COMMAND_SQLITE,
		REPOSITORY_EMPTY_RESULT,
		RESOURCE_CURSOR;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gom/gom.h", instance_pos = 1.9)]
	public delegate void AdapterCallback (Gom.Adapter adapter);
	[CCode (cheader_filename = "gom/gom.h", instance_pos = 3.9)]
	public delegate bool RepositoryMigrator (Gom.Repository repository, Gom.Adapter adapter, uint version) throws GLib.Error;
	[CCode (cheader_filename = "gom/gom.h", has_target = false)]
	public delegate void ResourceFromBytesFunc (GLib.Bytes bytes, GLib.Value value);
	[CCode (cheader_filename = "gom/gom.h", has_target = false)]
	public delegate GLib.Bytes ResourceToBytesFunc (GLib.Value value);
	[CCode (cheader_filename = "gom/gom.h")]
	[Version (replacement = "Error.quark")]
	public static GLib.Quark error_quark ();
}
